{"version":3,"sources":["pages/NotFound.tsx","store/hooks.ts","store/features/Products/productsSlice.ts","assets/star-icon.svg","UI/Button.tsx","store/features/Basket/basketSlice.ts","components/Card.tsx","components/Loader.tsx","components/TitleMassage.tsx","pages/HomePage/HomePage.tsx","components/Controls.tsx","pages/BasketPage/BasketPage.tsx","pages/ProductPage/ProductPage.tsx","App.tsx","api/axiosClient.ts","store/sagas/getProductsSaga.ts","api/products.ts","store/sagas/sendOrderSaga.ts","store/sagas/watchSaga.ts","store/sagas/root.ts","store/features/Controls/controlsSlice.ts","store/index.ts","GlobalStyle.ts","index.tsx"],"names":["NotFound","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","storage","statusLoading","error","productsSlice","createSlice","name","reducers","loadProducts","setProducts","state","action","payload","setStatus","setError","resetState","actions","selectProducts","products","selectProductsStatusLoading","selectProductsError","Button","styled","button","totalSum","totalCount","showSuccess","statusPosting","basketSlice","addProductToBasket","count","product","productIndexInBasket","findIndex","bp","id","countOrdered","push","Math","ceil","reduce","accumulator","elem","Number","price","removeProductFromBasket","deleteProductInBasket","splice","sendOrderToServer","console","log","setShowSuccess","setStatusPosting","clearBasket","selectBasket","basket","selectTotalSum","selectTotalCount","selectShowSusses","CardContainer","div","CardImage","img","CardContent","CardCategory","CardTitle","h2","CardDescription","p","CardPrice","h3","CardRating","CardRatingCount","span","Card","format","category","description","image","rating","title","dispatch","navigate","useNavigate","onClick","src","alt","StarIcon","e","stopPropagation","buyHandler","rotate","keyframes","LoaderWrapper","LoaderInner","Loader","Wrapper","status","css","TitleMessage","message","HomePage","isLoading","isEmptyBasket","useEffect","length","map","Controls","to","size","color","Basket","BasketList","BasketTotal","BasketPosition","BasketPositionTitle","BasketPositionControls","BasketPositionCost","OrderButton","BasketPage","total","setTimeout","pos","round","undefined","ProductPage","useParams","find","String","Header","header","Main","main","App","router","createHashRouter","path","element","errorElement","children","baseURL","instance","axios","create","client","url","get","response","data","getProductsSaga","put","delay","sendOrderSaga","select","forEach","watchSaga","takeLeading","type","takeEvery","rootSaga","popup","controlSlice","sagaMiddleware","createSagaMiddleware","persistConfig","key","whitelist","rootReducer","combineReducers","control","controlsSlice","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","persistor","persistStore","run","GlobalStyle","createGlobalStyle","ReactDOM","createRoot","document","getElementById","render","loading"],"mappings":"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","file":"static/js/main.6ca8c8ab.chunk.js","sourcesContent":["import { FunctionComponent } from 'react';\n\nexport const NotFound: FunctionComponent = () => {\n  return (\n    <div>\n      This page doesn&nbsp;t exist.\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '.';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../..';\nimport { Product } from '../../../type/Product';\n\nexport interface ProductsState {\n  storage: Product[];\n  statusLoading: 'idle' | 'loading' | 'failed';\n  error: string | null;\n}\n\nconst initialState: ProductsState = {\n  storage: [],\n  statusLoading: 'idle',\n  error: null,\n};\n\nconst productsSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    loadProducts: () => {\n    },\n    setProducts: (state: ProductsState, action: PayloadAction<Product[]>) => {\n      state.storage = action.payload;\n    },\n    setStatus: (\n      state: ProductsState,\n      action: PayloadAction<'idle' | 'loading' | 'failed'>,\n    ) => {\n      state.statusLoading = action.payload;\n    },\n    setError: (state: ProductsState, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.statusLoading = 'failed';\n    },\n    resetState: (state: ProductsState) => {\n      return { ...state, ...initialState };\n    },\n  },\n});\n\nexport default productsSlice.reducer;\nexport const {\n  loadProducts,\n  setProducts,\n  setStatus,\n  setError,\n  resetState,\n} = productsSlice.actions;\n\nexport const selectProducts = (state: RootState) => state.products.storage;\nexport const selectProductsStatusLoading\n= (state: RootState) => state.products.statusLoading;\nexport const selectProductsError = (state: RootState) => state.products.error;\n","export default __webpack_public_path__ + \"static/media/star-icon.bdc56500.svg\";","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  padding: 0;\n  margin: 0;\n  border: none;\n  background-color: transparent;\n  outline: none;\n  justify-content: center;\n  cursor: pointer;\n  height: fit-content;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: 'Raleway', sans-serif;\n\n  &:hover{\n    text-decoration: underline;\n  }\n`;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../..';\nimport { Product } from '../../../type/Product';\n\nexport type BasketPosition = {\n  product: Product;\n  countOrdered: number;\n};\n\nexport interface BasketState {\n  storage: BasketPosition[];\n  totalSum: number;\n  totalCount: number;\n  showSuccess: boolean;\n  statusPosting: 'idle' | 'posting' | 'failed';\n  error: string | null;\n}\n\nconst initialState: BasketState = {\n  storage: [],\n  totalSum: 0,\n  totalCount: 0,\n  showSuccess: false,\n  statusPosting: 'idle',\n  error: null,\n};\n\nconst basketSlice = createSlice({\n  name: 'basket',\n  initialState,\n  reducers: {\n    addProductToBasket: (\n      state: BasketState,\n      action: PayloadAction<{ product: Product; count: number }>,\n    ) => {\n      const { count, product } = action.payload;\n\n      const productIndexInBasket = state.storage\n        .findIndex(bp => bp.product.id === product.id);\n\n      if (productIndexInBasket >= 0) {\n        state.storage[productIndexInBasket].countOrdered += count;\n      } else {\n        state.storage.push({\n          product,\n          countOrdered: count,\n        });\n      }\n\n      // update total sum after all add operation\n      state.totalSum = Math.ceil(\n        state.storage.reduce((accumulator, elem) => accumulator\n        + Number(elem.product.price) * elem.countOrdered, 0) * 100,\n      ) / 100;\n\n      state.totalCount = state.storage.reduce((accumulator, elem) => accumulator\n        + elem.countOrdered, 0);\n    },\n    removeProductFromBasket: (\n      state: BasketState,\n      action: PayloadAction<{ product: Product; count: number }>,\n    ) => {\n      const { count, product } = action.payload;\n\n      const productIndexInBasket = state.storage\n        .findIndex(bp => bp.product.id === product.id);\n\n      if (productIndexInBasket >= 0\n        && state.storage[productIndexInBasket].countOrdered >= count) {\n        state.storage[productIndexInBasket].countOrdered -= count;\n\n        // update total sum after each remove operation\n        state.totalSum = Math.ceil(\n          state.storage.reduce((accumulator, elem) => accumulator\n          + Number(elem.product.price) * elem.countOrdered, 0) * 100,\n        ) / 100;\n\n        state.totalCount = state.storage.reduce(\n          (accumulator, elem) => accumulator + elem.countOrdered,\n          0,\n        );\n      }\n    },\n    deleteProductInBasket: (\n      state: BasketState,\n      action: PayloadAction<{ product: Product }>,\n    ) => {\n      const { product } = action.payload;\n\n      const productIndexInBasket = state.storage\n        .findIndex(bp => bp.product.id === product.id);\n\n      if (productIndexInBasket >= 0) {\n        state.storage.splice(productIndexInBasket, 1);\n\n        // update total sum after each delete operation\n        state.totalSum = Math.ceil(\n          state.storage.reduce((accumulator, elem) => accumulator\n          + Number(elem.product.price) * elem.countOrdered, 0) * 100,\n        ) / 100;\n\n        state.totalCount = state.storage.reduce(\n          (accumulator, elem) => accumulator + elem.countOrdered,\n          0,\n        );\n      }\n    },\n    sendOrderToServer: () => {\n      // add empty actions for saga watchers\n\n      // eslint-disable-next-line no-console\n      console.log('sendOrderToServer');\n    },\n    setShowSuccess: (state, action: PayloadAction<boolean>) => {\n      state.showSuccess = action.payload;\n    },\n    setStatusPosting: (\n      state: BasketState,\n      action: PayloadAction<'idle' | 'posting' | 'failed'>,\n    ) => {\n      state.statusPosting = action.payload;\n    },\n    setError: (state: BasketState, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.statusPosting = 'failed';\n    },\n    clearBasket: () => {\n      return initialState;\n    },\n  },\n});\n\nexport default basketSlice.reducer;\nexport const {\n  addProductToBasket,\n  removeProductFromBasket,\n  deleteProductInBasket,\n  sendOrderToServer,\n  setShowSuccess,\n  setStatusPosting,\n  setError,\n  clearBasket,\n} = basketSlice.actions;\n\nexport const selectBasket = (state: RootState) => state.basket.storage;\nexport const selectTotalSum = (state: RootState) => state.basket.totalSum;\nexport const selectTotalCount = (state: RootState) => state.basket.totalCount;\nexport const selectShowSusses = (state: RootState) => state.basket.showSuccess;\nexport const selectStatusPosting\n= (state: RootState) => state.basket.statusPosting;\n","import { FunctionComponent } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { Product } from '../type/Product';\nimport StarIcon from '../assets/star-icon.svg';\nimport { Button } from '../UI/Button';\nimport { useAppDispatch } from '../store/hooks';\nimport { addProductToBasket } from '../store/features/Basket/basketSlice';\n\nconst CardContainer = styled.div<{ format?: string }>`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 280px;\n  height: 400px;\n  border-radius: 10px;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n  margin: 10px;\n  box-sizing: border-box;\n  padding: 0 0 20px;\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst CardImage = styled.img<{ format?: string }>`\n  width: 100%;\n  height: 250px;\n  object-fit: cover;\n  overflow: hidden;\n`;\n\nconst CardContent = styled.div<{ format?: string }>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n`;\n\nconst CardCategory = styled.div<{ format?: string }>`\n  font-size: 12px;\n  padding: 0;\n`;\n\nconst CardTitle = styled.h2<{ format?: string }>`\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  max-width: 250px;\n  text-align: center;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-direction: normal;\n  -webkit-box-orient: vertical;\n  overflow-wrap: normal;\n  height: 48px;\n`;\n\nconst CardDescription = styled.p<{ format?: string }>`\n  font-size: 14px;\n  text-align: center;\n  max-height: 50px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 1;\n  -webkit-box-direction: normal;\n  -webkit-box-orient: vertical;\n  overflow-wrap: break-word;\n`;\n\nconst CardPrice = styled.h3<{ format?: string }>`\n  font-size: 24px;\n  font-weight: bold;\n  margin-top: 10px;\n`;\n\nconst CardRating = styled.div<{ format?: string }>`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n`;\n\nconst CardRatingCount = styled.span<{ format?: string }>`\n  font-size: 14px;\n  margin-left: 5px;\n`;\n\ninterface CardProps {\n  product: Product;\n  // eslint-disable-next-line react/require-default-props\n  format?: 'card' | 'page' | undefined;\n}\n\nexport const Card: FunctionComponent<CardProps> = ({\n  product,\n  format = 'card',\n}) => {\n  const {\n    category, description, image, price, rating, title, id,\n  } = product;\n  const { count } = rating;\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const buyHandler = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    dispatch(addProductToBasket({\n      product,\n      count: 1,\n    }));\n  };\n\n  const cardToggle = () => {\n    navigate(`product/${id}`);\n  };\n\n  return (\n    <CardContainer\n      onClick={cardToggle}\n      format={format}\n    >\n      <CardImage src={image} alt={description} format={format} />\n      <CardContent format={format}>\n        <CardCategory format={format}>{category}</CardCategory>\n        <CardTitle format={format}>{title}</CardTitle>\n        <CardDescription format={format}>{description}</CardDescription>\n        <CardPrice format={format}>\n          $\n          {price}\n        </CardPrice>\n        <CardRating format={format}>\n          <img src={StarIcon} alt=\"star icon\" />\n          <CardRatingCount format={format}>{`${count} available`}</CardRatingCount>\n        </CardRating>\n      </CardContent>\n\n      <Button onClick={e => buyHandler(e)}>Buy</Button>\n    </CardContainer>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const LoaderInner = styled.div`\n  border-radius: 50%;\n  width: 2em;\n  height: 2em;\n  margin: 1em auto;\n  border: 0.3em solid #ddd;\n  border-left-color: #000;\n  animation: ${rotate} 1.2s infinite linear;\n`;\n\nexport const Loader: FunctionComponent = () => {\n  // eslint-disable-next-line no-console\n  console.log('Loader ....');\n\n  return (\n    <LoaderWrapper>\n      <LoaderInner />\n    </LoaderWrapper>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport styled, { css } from 'styled-components';\n\nexport const Wrapper = styled.div<{ status: string }>`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n\n  ${({ status }) => (status === 'error') && css`\n    color: red;\n  `}\n`;\n\ninterface Props {\n  message: string;\n  status: 'error' | 'casual' | undefined;\n}\n\nexport const TitleMessage: FunctionComponent<Props> = ({\n  message,\n  status = 'casual',\n}) => {\n  return (\n    <Wrapper status={status}>\n      <h2>{message}</h2>\n    </Wrapper>\n  );\n};\n","import { FunctionComponent, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport {\n  useAppDispatch,\n  useAppSelector,\n} from '../../store/hooks';\nimport {\n  loadProducts,\n  selectProducts, selectProductsError, selectProductsStatusLoading,\n} from '../../store/features/Products/productsSlice';\nimport { Card } from '../../components/Card';\nimport { Product } from '../../type/Product';\nimport { Loader } from '../../components/Loader';\nimport { TitleMessage } from '../../components/TitleMassage';\nimport { selectTotalCount } from '../../store/features/Basket/basketSlice';\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  grid-template-columns: repeat(4, minmax(400px, 1fr));\n  gap: 20px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nexport const HomePage: FunctionComponent = () => {\n  const dispatch = useAppDispatch();\n  const products = useAppSelector(selectProducts);\n  const isLoading = useAppSelector(selectProductsStatusLoading) === 'loading';\n  const error = useAppSelector(selectProductsError);\n  const isEmptyBasket = useAppSelector(selectTotalCount) === 0;\n\n  useEffect(() => {\n    // use button 'Load Products' for start load saga\n    // but after sent order products will not reloading\n    // and will run default reload if basket is not empty\n    // in normal commercial we reload data after each routing on page\n    if (!isEmptyBasket) {\n      dispatch(loadProducts());\n    }\n  }, []);\n\n  if (error) {\n    return <TitleMessage message={error} status=\"error\" />;\n  }\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <Wrapper>\n      {products.length > 0 && products.map((product: Product) => (\n        <Card\n          key={product.id}\n          product={product}\n        />\n      ))}\n    </Wrapper>\n  );\n};\n","import {\n  FunctionComponent,\n} from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { IoCart, IoCartOutline, IoChevronBack } from 'react-icons/io5';\nimport {\n  clearBasket,\n  selectBasket,\n  selectTotalCount,\n} from '../store/features/Basket/basketSlice';\nimport { Button } from '../UI/Button';\nimport {\n  useAppDispatch,\n  useAppSelector,\n} from '../store/hooks';\nimport {\n  loadProducts, selectProducts,\n} from '../store/features/Products/productsSlice';\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n`;\n\nexport const Controls: FunctionComponent = () => {\n  const dispatch = useAppDispatch();\n  const basket = useAppSelector(selectBasket);\n  const products = useAppSelector(selectProducts);\n  const count = useAppSelector(selectTotalCount);\n\n  return (\n    <Wrapper>\n      <Link to=\"/\">\n        <IoChevronBack />\n      </Link>\n\n      {!products.length && (\n        <Button\n          onClick={() => dispatch(loadProducts())}\n        >\n          Load products\n        </Button>\n      )}\n\n      {!!basket.length && (\n        <>\n          <Button\n            onClick={() => dispatch(clearBasket())}\n          >\n            Clear basket\n          </Button>\n\n          Total:\n          {count}\n        </>\n      )}\n\n      <Link\n        to=\"basket\"\n      >\n        {basket.length\n          ? <IoCart size=\"2rem\" color=\"black\" />\n          : <IoCartOutline size=\"2rem\" color=\"grey\" />}\n      </Link>\n\n    </Wrapper>\n  );\n};\n","import { FunctionComponent, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { IoRemove, IoAdd, IoTrash } from 'react-icons/io5';\nimport {\n  useAppDispatch,\n  useAppSelector,\n} from '../../store/hooks';\n\nimport {\n  addProductToBasket,\n  clearBasket,\n  deleteProductInBasket,\n  removeProductFromBasket,\n  selectBasket,\n  selectShowSusses,\n  selectTotalSum,\n  sendOrderToServer,\n} from '../../store/features/Basket/basketSlice';\nimport { Button } from '../../UI/Button';\nimport { Product } from '../../type/Product';\nimport { TitleMessage } from '../../components/TitleMassage';\nimport {\n  selectProductsError,\n  selectProductsStatusLoading,\n} from '../../store/features/Products/productsSlice';\nimport { Loader } from '../../components/Loader';\n\nconst Basket = styled.div`\n  & h2 {\n    text-align: center;\n  }\n`;\n\nconst BasketList = styled.div`\n  border-bottom: 1px solid black;\n`;\n\nconst BasketTotal = styled.div`\n  padding: 10px 0;\n  border-bottom: 1px solid black;\n  text-align: right;\n`;\n\nconst BasketPosition = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n\nconst BasketPositionTitle = styled.div`\n  width: 500px;\n`;\n\nconst BasketPositionControls = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n`;\n\nconst BasketPositionCost = styled.div`\n  margin-left: 30px;\n  width: 100px;\n  text-align: right;\n`;\n\nconst OrderButton = styled(Button)`\n  margin: 100px auto;\n  font-size: 30px;\n`;\n\nexport const BasketPage: FunctionComponent = () => {\n  const dispatch = useAppDispatch();\n  const basket = useAppSelector(selectBasket);\n  const total = useAppSelector(selectTotalSum);\n  const isLoading = useAppSelector(selectProductsStatusLoading) === 'loading';\n  const error = useAppSelector(selectProductsError);\n  const showSuccess = useAppSelector(selectShowSusses);\n  const navigate = useNavigate();\n\n  // there we watch for showSuccess from state.basket\n  // if response of order to server is success\n  // we show success message\n  // and after 3s clear basket and redirect to route homepage\n  useEffect(() => {\n    if (showSuccess) {\n      setTimeout(() => {\n        dispatch(clearBasket());\n        navigate('/');\n      }, 3000);\n    }\n  }, [showSuccess]);\n\n  const addHandler = (product: Product) => {\n    dispatch(addProductToBasket({ product, count: 1 }));\n  };\n\n  const removeHandler = (product: Product, count: number) => {\n    // delete position for the only one\n    if (count === 1) {\n      dispatch(deleteProductInBasket({ product }));\n\n      return;\n    }\n\n    dispatch(removeProductFromBasket({ product, count: 1 }));\n  };\n\n  const deleteHandler = (product: Product) => {\n    dispatch(deleteProductInBasket({ product }));\n  };\n\n  if (error) {\n    return <TitleMessage message={error} status=\"error\" />;\n  }\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (showSuccess) {\n    return <TitleMessage message=\"Order sent\" status=\"casual\" />;\n  }\n\n  return (\n    <div>\n      {basket.length ? (\n        <Basket>\n          <BasketList>\n            {basket.map(pos => (\n              <BasketPosition key={pos.product.id}>\n                <BasketPositionTitle>\n                  <Button onClick={() => navigate(`/product/${pos.product.id}`)}>\n                    {pos.product.title}\n                  </Button>\n                </BasketPositionTitle>\n\n                <BasketPositionControls>\n                  <Button\n                    onClick={() => removeHandler(pos.product, pos.countOrdered)}\n                  >\n                    <IoRemove size=\"2rem\" />\n                  </Button>\n\n                  {pos.countOrdered}\n\n                  <Button onClick={() => addHandler(pos.product)}>\n                    <IoAdd size=\"2rem\" />\n                  </Button>\n                  <Button onClick={() => deleteHandler(pos.product)}>\n                    <IoTrash size=\"2rem\" />\n                  </Button>\n\n                  <BasketPositionCost>\n                    {`$${Math.round(pos.countOrdered * (+pos.product.price) * 100) / 100}`}\n                  </BasketPositionCost>\n                </BasketPositionControls>\n              </BasketPosition>\n            ))}\n          </BasketList>\n          <BasketTotal>\n            Total:&nbsp;&nbsp;&nbsp;$\n            {total}\n          </BasketTotal>\n\n          <OrderButton onClick={() => dispatch(sendOrderToServer())}>\n            Order\n          </OrderButton>\n        </Basket>\n      ) : (\n        <TitleMessage message=\"Basket is empty\" status={undefined} />\n      )}\n    </div>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {\n  useAppSelector,\n} from '../../store/hooks';\nimport {\n  selectProducts,\n} from '../../store/features/Products/productsSlice';\nimport { Card } from '../../components/Card';\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  grid-template-columns: repeat(4, minmax(400px, 1fr));\n  gap: 20px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nexport const ProductPage: FunctionComponent = () => {\n  const { id } = useParams();\n  const products = useAppSelector(selectProducts);\n  const product = products.find(p => String(p.id) === id);\n\n  return (\n    <Wrapper>\n      {product && <Card product={product} />}\n    </Wrapper>\n  );\n};\n","import { createHashRouter, Outlet } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { NotFound } from './pages/NotFound';\nimport { HomePage } from './pages/HomePage/HomePage';\nimport { Controls } from './components/Controls';\nimport { BasketPage } from './pages/BasketPage';\nimport { ProductPage } from './pages/ProductPage';\n\nconst Wrapper = styled.div`\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100vh;\n  `;\n\nconst Header = styled.header`\n  max-width: 1270px;\n  margin: 0 auto;\n  text-align: center;\n  margin-bottom: 1rem;\n`;\n\nconst Main = styled.main`\n  max-width: 1270px;\n  margin: 0 auto;\n`;\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Header>\n        <h1>Shop</h1>\n        <Controls />\n      </Header>\n\n      <Main>\n        <Outlet />\n      </Main>\n    </Wrapper>\n  );\n}\n\nexport const router = createHashRouter([\n  {\n    path: '/',\n    element: <App />,\n    errorElement: <NotFound />,\n    id: 'root',\n    children: [\n      {\n        path: '/',\n        element: <HomePage />,\n        id: 'homePage',\n        errorElement: <>Error on HomePage</>,\n      },\n      {\n        path: '/basket',\n        element: <BasketPage />,\n        id: 'basketPage',\n        errorElement: <>Error on BasketPage</>,\n      },\n      // there we can add page for each product\n      {\n        path: '/product/:id',\n        element: <ProductPage />,\n        errorElement: <>Error on ProductPage</>,\n      },\n    ],\n  },\n]);\n","import axios from 'axios';\n\nconst baseURL = 'https://fakestoreapi.com/products';\n\nconst instance = axios.create({\n  baseURL,\n});\n\ntype FetchData = {\n};\n\nexport const client = {\n  async get<T>(url: string) {\n    const response = await instance.get<T>(url);\n\n    // eslint-disable-next-line no-console\n    console.log('get', baseURL + url);\n\n    return response.data;\n  },\n\n  async post<T>(url: string, data: FetchData) {\n    const response = await instance.post<T>(url, data);\n\n    return response.data;\n  },\n\n  async patch<T>(url: string, data: FetchData) {\n    const response = await instance.patch<T>(url, data);\n\n    return response.data;\n  },\n\n  async delete(url: string) {\n    return instance.delete(url);\n  },\n};\n","/* eslint-disable import/no-cycle */\nimport { AxiosError } from 'axios';\nimport { put, delay } from 'redux-saga/effects';\nimport { getAllProducts } from '../../api/products';\nimport { Product } from '../../type/Product';\nimport {\n  setError,\n  setProducts,\n  setStatus,\n} from '../features/Products/productsSlice';\n\nexport function* getProductsSaga() {\n  // eslint-disable-next-line no-console\n  console.log('getProductsSaga');\n  yield put(setStatus('loading'));\n\n  try {\n    yield delay(3000);\n    const response: Product[] = yield getAllProducts();\n\n    // eslint-disable-next-line no-console\n    console.log(response);\n\n    yield put(setProducts(response));\n  } catch (error: unknown) {\n    yield put(setError((error as AxiosError).message));\n  } finally {\n    yield put(setStatus('idle'));\n  }\n}\n","import { client } from './axiosClient';\n\nexport const getAllProducts = () => client.get<[]>('/');\n// export const getAllCategories = () => client.get<[]>('/categories');\n// export const getCategory = (category: string) => client.get<[]>(`/categories/${category}`);\n","/* eslint-disable import/no-cycle */\nimport { put, delay, select } from 'redux-saga/effects';\nimport { AxiosError } from 'axios';\nimport {\n  BasketPosition,\n  setError,\n  setShowSuccess,\n  setStatusPosting,\n} from '../features/Basket/basketSlice';\nimport { RootState } from '..';\n\nexport function* sendOrderSaga(): Generator<unknown, void, BasketPosition[]> {\n  // eslint-disable-next-line no-console\n  console.log('sendOrderSaga');\n\n  // set loader status 'true'\n  yield put(setStatusPosting('posting'));\n\n  try {\n    yield delay(5000); // it's sagas effect for delay\n\n    // show order in console not prepared object\n    const basket = yield select((state: RootState) => state.basket.storage);\n\n    // eslint-disable-next-line no-console\n    console.log('Your order is:');\n    basket.forEach((e: BasketPosition) => {\n      // eslint-disable-next-line no-console\n      console.log(e.product.title, e.countOrdered);\n    });\n\n    const total = yield select((state: RootState) => state.basket.totalSum);\n\n    // eslint-disable-next-line no-console\n    console.log('Your total sum is:', total);\n\n    // there should to axios post with token + prepared data of basket\n    yield put(setShowSuccess(true)); // it's emulate response from server\n  } catch (error: unknown) {\n    yield put(setError((error as AxiosError).message));\n  } finally {\n    yield put(setStatusPosting('idle'));\n  }\n}\n","/* eslint-disable import/no-cycle */\nimport { takeLeading, takeEvery } from 'redux-saga/effects';\nimport { sendOrderToServer } from '../features/Basket/basketSlice';\nimport { loadProducts } from '../features/Products/productsSlice';\nimport { getProductsSaga } from './getProductsSaga';\nimport { sendOrderSaga } from './sendOrderSaga';\n\nexport function* watchSaga() {\n  // eslint-disable-next-line no-console\n  console.log('watchSaga');\n\n  // send only first response\n  // but we can add pagination for each response\n  yield takeLeading(loadProducts().type, getProductsSaga);\n\n  // run sendOrder every time\n  yield takeEvery(sendOrderToServer().type, sendOrderSaga);\n}\n","/* eslint-disable import/no-cycle */\nimport { watchSaga } from './watchSaga';\n\nexport default function* rootSaga() {\n  // eslint-disable-next-line no-console\n  console.log('root saga');\n\n  yield watchSaga();\n}\n","/* eslint-disable no-case-declarations */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice,\n} from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\n\nexport interface ControlState {\n  // I use this state to control global UI\n  popup: {\n    // like this\n    // showPopup1: boolean;\n    // showPopup2: boolean;\n  },\n}\n\nconst initialState: ControlState = {\n  popup: {\n  },\n};\n\nconst controlSlice = createSlice({\n  name: 'controls',\n  initialState,\n  reducers: {\n    resetState: () => {\n      return initialState;\n    },\n  },\n});\n\nexport default controlSlice.reducer;\nexport const {\n  resetState,\n} = controlSlice.actions;\n","/* eslint-disable import/no-cycle */\nimport {\n  configureStore,\n  ThunkAction,\n  Action,\n  combineReducers,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\nimport storage from 'redux-persist/lib/storage';\nimport rootSaga from './sagas/root';\nimport controlsSlice from './features/Controls/controlsSlice';\nimport productsSlice from './features/Products/productsSlice';\nimport basketSlice from './features/Basket/basketSlice';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: [\n    'basket',\n    // 'products', // don't save products state in local storage\n  ],\n  // blacklist: ['interval'],\n};\n\nconst rootReducer = combineReducers({\n  control: controlsSlice,\n  products: productsSlice,\n  basket: basketSlice,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    thunk: false,\n    serializableCheck: {\n      ignoredActions: [\n        FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER,\n        // 'posts',\n      ],\n    },\n  }).concat(sagaMiddleware),\n});\n\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\n/* eslint-disable @typescript-eslint/indent */\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Raleway', sans-serif;\n    user-select: none;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n`;\n","import ReactDOM from 'react-dom/client';\n\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { RouterProvider } from 'react-router-dom';\nimport { router } from './App';\nimport { store, persistor } from './store';\nimport { GlobalStyle } from './GlobalStyle';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement,\n);\n\nroot.render(\n  <>\n    <GlobalStyle />\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <RouterProvider router={router} />\n      </PersistGate>\n    </Provider>\n  </>,\n);\n"],"sourceRoot":""}